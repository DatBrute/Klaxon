Pursue nearest enemy as the AI for missiles. 
Pursue player as the AI for planes.
Rename AIs.
✔️

For vision, we need to know which player is this one, or whether they are spectator.
✔️

Only pursue visible.
Units have a radar range and vision range.
They have a flat modifier for enemy radar range, and a % modifer for visual range.
At max range they will detect enemies on average in 10 seconds (random chance each pframe).
At half range they will detect enemies instantly. This scales linearly in terms of time.
Once detected, an enemy will undetect only once it leaves range. It will then do so instantly.
There should be an icon showing that you are detected.
✔️

Chaff will appear at radar/visual range or within its own AoE without modifiers. It will disappear once radar-detected. 
✔️

Current plan is:
No fog script/shader.
Render Fog, then Aura, then Plane.
Render plane only where Aura, as a shader.
Set plane render priority to -1.
(On Godot 4.0 they have uniform shaders so it should instead be do not render fog within visual distance.)
✔️ confirmed this will work, though it is messy


Interference increases if you don't cap your r_rate or the enemy jams you (directional radar only).
	It regenerates at a rate linearly going from double to single at 0 and full.
	It affects radar range, enemy radar range reduction, jam range, jam strength, multiplicatively.
	It's the only way to negatively impact your radar capabilities.
Can direct radar, taking a few seconds to boost in 90 degree arc, at cost to own.
Interference (now called EW) regens at 1-2x. 0% EW = 0% radar.
Detection/jam pow is normal up to 50%, then scaling to double that.

power curve displayer


Fuel goes down based on distance travelled. Its consumption is doubled if above a certain speed, as a binary thing for the sake of player clarity.
Planes have a manual decel stat and a forced decel stat. Manual might be higher due to airbrakes. Forced happens when out of fuel.
Lifetimes of non-fuze missiles are generally replaced with fuel/decel.

AA guns need to fire predictively, have some level of inaccuracy, and in the case of flak, adjust their lifetimes accordingly.

Having units that move exactly the same as another unit but rotate independently could be a cool way to implement turrets.
