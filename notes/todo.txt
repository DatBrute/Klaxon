Pursue nearest enemy as the AI for missiles. 
Pursue player as the AI for planes.
Rename AIs.
✔️

For vision, we need to know which player is this one, or whether they are spectator.
✔️

Only pursue visible.
Units have a radar range and vision range.
They have a flat modifier for enemy radar range, and a % modifer for visual range.
At max range they will detect enemies on average in 10 seconds (random chance each pframe).
At half range they will detect enemies instantly. This scales linearly in terms of time.
Once detected, an enemy will undetect only once it leaves range. It will then do so instantly.
There should be an icon showing that you are detected.
✔️

Chaff will appear at radar/visual range or within its own AoE without modifiers. It will disappear once radar-detected. 
✔️

Current plan is:
No fog script/shader.
Render Fog, then Aura, then Plane.
Render plane only where Aura, as a shader.
Set plane render priority to -1.
(On Godot 4.0 they have uniform shaders so it should instead be do not render fog within visual distance.)
✔️

Bombs flash briefly when spawned, it is suspected this has to do with the explosion prediction
✔️


New ideas:
Aura represents visual range which is "hard" detection barring clouds.
Radar just rotates slowly, no need to shutdown to move. Can determine arc size vs focus as well.
Missiles may have independent vision systems; they don't spot for allies nor do allies spot for them.
Some player-only vision could be in pings, which update on a cool radar refresh rate, 
	do not show what the spotted target is, and targeting AI won't use it.
Targeting classes in addition to ammo classes, to allow for anti-radar dmg.

Interference increases if you don't cap your r_rate or the enemy jams you (directional radar only).
	It regenerates at a rate linearly going from double to single at 0 and full.
	It affects radar range, enemy radar range reduction, jam range, jam strength, multiplicatively.
	It's the only way to negatively impact your radar capabilities.
Can direct radar, taking a few seconds to boost in 90 degree arc, at cost to own.
Interference (now called EW) regens at 1-2x. 0% EW = 0% radar.
Detection/jam pow is normal up to 50%, then scaling to double that.
Wider angle is more defensive jamming, less offensive jamming.

HEAR HEAR: 
All vision auras shall be done using a shader similar to the fog shader attached to the background.
This shader will set the COLOR to a fixed value if not in fog of war, but adjust the alpha depending on detection strength.
It will ignore jam strength, cuz that's always the same as detection strength (make it so!), except for in visual range where you probably don't care.
Notably this will require iterating through each plane to find the one with the greatest detection strength for this pixel.

HEAR HEAR 2:
The big question rn is what should extending the radar range do? Reduce the arc surely, but also reduce/increase offensive/defensive jamming?
Let's say it reduces neither, but only affects the range of offensive AND RADAR, which tapers off in strength anyway.
Unfortunately, directional radar would likely mean reworking the fog shader into ssomething rather ugly. 
Also radar strength is, uh, trinary.

HEAR HEAR 3:
Instead of the complex variables we have now, there will merely be detection strength, which determines radar strength and distance.
This will be rendered in a sort of egg-shape.
There will be no instant radar detection. Instead there will be a reasonable base and max time.
There will also need to be a tracking indicator so players know when their targets are almost out of range. 
I suggest a crosshair with variable length lines, when the lines are no more and only the circle remains the lock is lost.



Fuel goes down based on distance travelled. Its consumption is doubled if above a certain speed, as a binary thing for the sake of player clarity.
Planes have a manual decel stat and a forced decel stat. Manual might be higher due to airbrakes. Forced happens when out of fuel.
Lifetimes of non-fuze missiles are generally replaced with fuel/decel.

AA guns need to fire predictively, have some level of inaccuracy, and in the case of flak, adjust their lifetimes accordingly.

Having units that move exactly the same as another unit but rotate independently could be a cool way to implement turrets.

power curve displayer

Prerequisite for a vertical sidebar UI is probably having the camera centered on the remaining portion of the screen.
